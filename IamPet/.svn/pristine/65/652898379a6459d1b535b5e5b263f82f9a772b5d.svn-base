package delivery;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;

import db.RdbmsDAO;

public class DeliveryDAO extends RdbmsDAO{

	private static DeliveryDAO _deliveryDAO;

	private DeliveryDAO() {}

	public static DeliveryDAO getDeliveryDAO() {

		if (_deliveryDAO == null) {
			_deliveryDAO = new DeliveryDAO();
		}
		return _deliveryDAO;
	}
	
	//배송정보입력
		public int insert(DeliveryDTO deliveryDto)throws Exception
		{
			Connection con = null;
			PreparedStatement pstmt = null;
			String insert = "insert into delivery values(delivery_no,?,?,?,?,?)";
			try
			{
				con = getConnection();
				pstmt = con.prepareStatement(insert);
				pstmt.setString(1, deliveryDto.getOrder_code());
				pstmt.setString(2, deliveryDto.getMember_id());
				pstmt.setString(3, deliveryDto.getDelivery_status());
				pstmt.setString(4, deliveryDto.getSend_date());
				pstmt.setString(5, deliveryDto.getReceive_date());
				int row = pstmt.executeUpdate();
				
				return row;
			}
			finally
			{
				if(pstmt != null)
				{
					pstmt.close();
				}
				if(con != null)
				{
					releaseConnection(con);
				}
			}
		}
		//고객 한명 배송상태 확인
		public DeliveryDTO findStatus(String delivery_status)throws Exception
		{
			DeliveryDTO deliveryDto = null;
			Connection con = null;
			PreparedStatement pstmt = null;
			ResultSet rs = null;
			String findstatus ="select delivery_no,order_code,member_id,delivery_status,send_date,receive_date" +
							   "from delivery where delivery_status=?";
			try
			{	
				con = getConnection();
				pstmt = con.prepareStatement(findstatus);
				pstmt.setString(1, delivery_status);
				rs = pstmt.executeQuery();
				if(rs.next())
				{
					deliveryDto = new DeliveryDTO(
									   rs.getInt("delivery_no"), 
								       rs.getString("order_code"), 
								       rs.getString("member_id"), 
								       rs.getString("delivery_status"), 
								       rs.getString("send_date"), 
								       rs.getString("receive_date"));
					
				}
				return deliveryDto;
			}
			finally
			{
				if(pstmt != null)
				{
					pstmt.close();
				}
				if(rs != null)
				{
					rs.close();	
				}
				if(con != null)
				{
					releaseConnection(con);
				}
			}
		}
		//배송취소
		public int remove(String member_id)throws Exception
		{
			Connection con = null;
			PreparedStatement pstmt = null;
			String remove = "delete from delivery where member_id=?";
			try
			{
				con = getConnection();
				pstmt = con.prepareStatement(remove);
				pstmt.setString(1, member_id);
				int row = pstmt.executeUpdate();
				
				return row;
			}
			finally
			{
				if(pstmt != null)
				{
					pstmt.close();
				}
				if(con != null)
				{
					releaseConnection(con);
				}
			}
			
		}
		//고객 배송정보 1명 확인
		public DeliveryDTO findDelivery(String member_id)throws Exception
		{
			DeliveryDTO deliveryDto = null;
			Connection con = null;
			PreparedStatement pstmt = null;
			ResultSet rs = null;
			String findstatus ="select delivery_no,order_code,member_id,delivery_status,send_date,receive_date" +
					   		   "from delivery where member_id=?";
			try
			{	
				con = getConnection();
				pstmt = con.prepareStatement(findstatus);
				pstmt.setString(1, member_id);
				rs = pstmt.executeQuery();
				if(rs.next())
				{
					deliveryDto = new DeliveryDTO(
										rs.getInt("delivery_no"), 
										rs.getString("order_code"), 
										rs.getString("member_id"), 
										rs.getString("delivery_status"), 
										rs.getString("send_date"), 
										rs.getString("receive_date"));
					
				}
				return deliveryDto;
			}
			finally
			{
				if(pstmt != null)
				{
					pstmt.close();
				}
				if(rs != null)
				{
					rs.close();	
				}
				if(con != null)
				{
					releaseConnection(con);
				}
			}
		}
		//고객들 배송정보 확인
		public ArrayList<DeliveryDTO> allDelivery()throws Exception
		{
			ArrayList<DeliveryDTO> arrayList = new ArrayList<DeliveryDTO>();
			Connection con = null;
			PreparedStatement pstmt = null;
			ResultSet rs = null;
			String allDelivery = "select delivery_no,order_code,member_id,delivery_status,send_date,receive_date" +
								 "from delivery";
			
			try
			{
				con = getConnection();
				pstmt = con.prepareStatement(allDelivery);
				rs = pstmt.executeQuery();
				
				while(rs.next())
				{
					arrayList.add(new DeliveryDTO(rs.getInt("delivery_no"), 
												  rs.getString("order_code"), 
												  rs.getString("member_id"), 
												  rs.getString("delivery_status"), 
												  rs.getString("send_date"), 
												  rs.getString("receive_date")));
					
				}
				
			}
			finally
			{
				if(rs != null)
				{
					rs.close();
				}
				if(pstmt != null)
				{
					pstmt.close();
				}
				if(con != null)
				{
					releaseConnection(con);
				}
			}
			return arrayList;
		}
		//발송 날짜별 구매자 정보 확인
		public ArrayList<DeliveryDTO> findDate(String send_date)throws Exception
		{
			ArrayList<DeliveryDTO> arrayList = new ArrayList<DeliveryDTO>();
			Connection con = null;
			PreparedStatement pstmt = null;
			ResultSet rs = null;
			String findDate = "select delivery_no,order_code,member_id,delivery_status,send_date,receive_date" +
					 		  "from delivery where send_date=?";
			try
			{
				con = getConnection();
				pstmt = con.prepareStatement(findDate);
				pstmt.setString(1, send_date);
				rs = pstmt.executeQuery();
				while(rs.next())
				{
					arrayList.add(new DeliveryDTO(rs.getInt("delivery_no"), 
												  rs.getString("order_code"), 
												  rs.getString("member_id"), 
												  rs.getString("delivery_status"), 
												  rs.getString("send_date"), 
												  rs.getString("receive_date")));
														 
				}
				
			}
			finally
			{
				if(rs != null)
				{
					rs.close();
				}
				if(pstmt != null)
				{
					pstmt.close();
				}
				if(con != null)
				{
					releaseConnection(con);
				}
			}
			return arrayList;
		}
		//XX제품을 구매한 고객들정보 확인
		public ArrayList<DeliveryDTO> findItem(String order_code)throws Exception
		{
			ArrayList<DeliveryDTO> arrayList = new ArrayList<DeliveryDTO>();
			Connection con = null;
			PreparedStatement pstmt = null;
			ResultSet rs = null;
			String findItem = "select delivery_no,order_code,member_id,delivery_status,send_date,receive_date" +
							  "from delivery where order_code=?";
			try
			{
				con = getConnection();
				pstmt = con.prepareStatement(findItem);
				pstmt.setString(1, order_code);
				rs = pstmt.executeQuery();
				while(rs.next())
				{
					arrayList.add(new DeliveryDTO(rs.getInt("delivery_no"), 
							  					  rs.getString("order_code"), 
							  					  rs.getString("member_id"), 
							  					  rs.getString("delivery_status"), 
							  					  rs.getString("send_date"), 
							  					  rs.getString("receive_date")));
														 
				}
				
			}
			finally
			{
				if(rs != null)
				{
					rs.close();
				}
				if(pstmt != null)
				{
					pstmt.close();
				}
				if(con != null)
				{
					releaseConnection(con);
				}
			}
			return arrayList;
		}

		
		
		
		
		
	}

	
	
